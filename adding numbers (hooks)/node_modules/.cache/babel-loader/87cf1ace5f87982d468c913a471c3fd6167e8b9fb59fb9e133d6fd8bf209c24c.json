{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Namai\\\\Downloads\\\\mapping-components-practice\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));\nvar numbers = [3, 56, 2, 48, 5];\n\n////Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map(function (x) {\n//   return x * 2;\n// });\n\nvar newNumbers = numbers.map(function (x) {\n  return x * x;\n});\n\n//////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(function(num) {\n//   return num < 10;\n// });\n\nvar newNumbersFilter = numbers.filter(function (num) {\n  return num < 10;\n});\n//Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     return accumulator + currentNumber;\n// })\n\n////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(function (num) {\n//   return num > 10;\n// })\n\n////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {\n//   return num > 10;\n// })","map":{"version":3,"names":["React","ReactDOM","App","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById","numbers","newNumbers","map","x","newNumbersFilter","filter","num"],"sources":["C:/Users/Namai/Downloads/mapping-components-practice/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n var numbers = [3, 56, 2, 48, 5];\n\n////Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map(function (x) {\n//   return x * 2;\n// });\n\nconst newNumbers = numbers.map(x => x * x);\n\n\n\n//////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(function(num) {\n//   return num < 10;\n// });\n\nconst newNumbersFilter = numbers.filter(num => num < 10);\n//Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     return accumulator + currentNumber;\n// })\n\n////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(function (num) {\n//   return num > 10;\n// })\n\n////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {\n//   return num > 10;\n// })\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,GAAG,MAAM,kBAAkB;AAElCD,QAAQ,CAACE,MAAM,eAACH,KAAA,CAAAI,aAAA,CAACF,GAAG;EAAAG,MAAA;EAAAC,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAA,CAAE,CAAC,EAAEC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAExD,IAAIC,OAAO,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;;AAEhC;AACA;AACA;AACA;;AAEA,IAAMC,UAAU,GAAGD,OAAO,CAACE,GAAG,CAAC,UAAAC,CAAC;EAAA,OAAIA,CAAC,GAAGA,CAAC;AAAA,EAAC;;AAI1C;AACA;AACA;AACA;;AAEA,IAAMC,gBAAgB,GAAGJ,OAAO,CAACK,MAAM,CAAC,UAAAC,GAAG;EAAA,OAAIA,GAAG,GAAG,EAAE;AAAA,EAAC;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}